import { useState } from 'react'
import { Trophy, CheckCircle, Star, Clock,  RefreshCw, Plus, Trash2, Zap, Target, Info } from 'lucide-react'
import { useChallenges, type Challenge } from '../../hooks/useChallenges'
import { useUser } from '../../hooks/useUser'
import { useExpenses, type Expense } from '../../hooks/useExpenses'
import challengeAgent from '../../Agents/challengeAgent'
import type { UserProfile, Challenge as AgentChallenge } from '../../Agents/challengeAgent'
import { useIsMobile } from '../../hooks/use-Mobile'
import { Popover } from '../popover'

interface ChallengesTabProps {
  userProfile?: Partial<UserProfile>
}

export default function ChallengesTab({ userProfile }: ChallengesTabProps) {
  const isMobile = useIsMobile()
  const [generatingChallenges, setGeneratingChallenges] = useState(false)
  const [showLevelUpModal, setShowLevelUpModal] = useState(false)

  // Use custom hooks
  const {
    isLoading: challengesLoading,
    error: challengesError,
    addMultipleChallenges,
    completeChallenge,
    deleteAllChallenges,
    refreshChallenges,
    stats,
    activeChallenges
  } = useChallenges()

  const {
    user,
    levelInfo,
    getLevelName,
    fixUserLevel
  } = useUser()

  const {
    fetchExpenses,
    isLoading: expensesLoading
  } = useExpenses()

  // Default user profile
  const defaultProfile: UserProfile = {
    currentlyEarn: userProfile?.currentlyEarn || 'yes',
    employmentType: userProfile?.employmentType || 'student',
    mainPurpose: userProfile?.mainPurpose || 'saving',
    financeKnowledge: userProfile?.financeKnowledge || 'beginner',
    weeklyExpenses: []
  }

  // Convert Expense to SimpleExpenseItem format for the agent
  const convertToSimpleExpenses = (expenses: Expense[]) => {
    return expenses.map(expense => ({
      category: expense.category,
      amount: expense.amount,
      description: expense.description
    }))
  }

  // Generate AI challenges
  const generateChallenges = async () => {
    setGeneratingChallenges(true)
    
    try {
      // Fetch expenses and get recent ones
      const allExpenses = await fetchExpenses()
      
      // Get weekly expenses directly from allExpenses instead of using state
      const cutoffDate = new Date()
      cutoffDate.setDate(cutoffDate.getDate() - 7)
      
      const weeklyExpenses = allExpenses.filter((expense: Expense) => {
        const expenseDate = new Date(expense.date)
        return expenseDate >= cutoffDate
      })
      
      const simpleExpenses = convertToSimpleExpenses(weeklyExpenses)
      
      const profileData = { 
        ...defaultProfile, 
        weeklyExpenses: simpleExpenses 
      }
      
      const generatedChallenges = await challengeAgent(profileData)
      
      if (generatedChallenges && generatedChallenges.length > 0) {
        // The agent returns a deadline like "in 7 days". We calculate the final date here.
        const mappedChallenges: Omit<Challenge, 'id' | 'createdAt'>[] = generatedChallenges.map((challenge: AgentChallenge) => {
          const deadlineDate = new Date();
          const daysToAdd = parseInt(challenge.deadline.split(' ')[1]) || 7;
          deadlineDate.setDate(deadlineDate.getDate() + daysToAdd);

          return {
            title: challenge.title,
            description: challenge.description,
            category: challenge.category ?? 'saving',
            difficulty: mapDifficulty(challenge.difficulty),
            xpReward: challenge.xpReward,
            deadline: deadlineDate.toISOString(),
            emoji: challenge.emoji,
            completed: false
          }
        })
        
        // Add challenges to backend
        await addMultipleChallenges(mappedChallenges)
        console.log('✅ Successfully generated and added', generatedChallenges.length, 'personalized challenges')
      } else {
        console.warn('⚠️ No challenges generated by agent')
      }
    } catch (error) {
      console.error('❌ Error generating challenges:', error)
    } finally {
      setGeneratingChallenges(false)
    }
  }

  // Map agent difficulty to our type
  const mapDifficulty = (difficulty: string): 'easy' | 'medium' | 'hard' => {
    const difficultyMap: Record<string, 'easy' | 'medium' | 'hard'> = {
      'GRASSHOPPER': 'easy',
      'APPRENTICE': 'medium',
      'MASTER': 'hard',
      'easy': 'easy',
      'medium': 'medium',
      'hard': 'hard'
    }
    return difficultyMap[difficulty] || 'medium'
  }

  // Handle challenge completion
  const handleCompleteChallenge = async (challengeId: string) => {
    try {
      const oldLevel = levelInfo.currentLevel
      await completeChallenge(challengeId)
      // Refresh user data to get updated XP and level from global cache
      await fixUserLevel()
      
      // Small delay to ensure state is updated, then check if user leveled up
      setTimeout(() => {
        if (levelInfo.currentLevel > oldLevel) {
          setShowLevelUpModal(true)
        }
      }, 500)
    } catch (error) {
      console.error('Error completing challenge:', error)
    }
  }

  // Clear all challenges
  const handleClearAllChallenges = async () => {
    try {
      await deleteAllChallenges()
    } catch (error) {
      console.error('Error clearing challenges:', error)
    }
  }

  // Utility functions
  const getDifficultyColor = (difficulty: string) => {
    const colors: Record<string, string> = {
      easy: 'text-green-500',
      medium: 'text-yellow-500',
      hard: 'text-red-500'
    }
    return colors[difficulty.toLowerCase()] || 'text-gray-500'
  }

  const getCategoryColor = (category: string) => {
    const colors: Record<string, string> = {
      saving: 'bg-green-500',
      investing: 'bg-yellow-500',
      budgeting: 'bg-blue-500',
      learning: 'bg-purple-500',
      default: 'bg-gray-500'
    }
    return colors[category.toLowerCase()] || colors.default
  }

  // Format challenge deadline
  const formatDeadline = (deadline: string) => {
    const end = new Date(deadline)
    const now = new Date()
    if (now > end) return 'Expired'
    const diffTime = end.getTime() - now.getTime()
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    if (diffDays <= 0) return 'Ends today'
    if (diffDays === 1) return 'Ends tomorrow'
    return `${diffDays} days left`
  }

  return (
    <div className="space-y-6">
      {/* Header with User Level Info and Info Popover */}
      <div className={`flex ${isMobile ? 'flex-col space-y-4' : 'justify-between items-center'}`}>        
        <div className="flex items-center gap-2">
          <Popover>
            <Popover.Trigger asChild>
              <button
                className="bg-[#F0F8FF] border-2 border-[#001F3F] text-[#001F3F] hover:bg-[#007FFF] hover:text-white transition-colors rounded-md p-1 flex items-center shadow font-minecraft text-xs focus:outline-none focus:ring-2 focus:ring-[#007FFF]"
                aria-label="How Challenges Work"
                tabIndex={0}
              >
                <Info className="w-4 h-4 mr-1" />
                <span className="hidden sm:inline">How it works</span>
              </button>
            </Popover.Trigger>
            <Popover.Content className="bg-[#F0F8FF] border-2 border-[#001F3F] rounded-lg shadow-lg max-w-xs font-minecraft text-[#001F3F] text-sm p-4">
              <div className="flex items-center mb-2">
                <Trophy className="w-5 h-5 text-yellow-400 mr-2" />
                <span className="font-bold">How Challenges Work</span>
              </div>
              <p className="mb-2">
                <span className="font-bold">Finfluenzz</span> analyzes your past week's expenses and generates personalized financial challenges to help you save, invest, and budget smarter.
              </p>
              <p>
                The more you use the app, the more tailored your challenges become! Complete challenges to earn XP and level up your financial game. 🎮
              </p>
            </Popover.Content>
          </Popover>
        </div>
        {user && (
          <div className="bg-[#F0F8FF] dark:bg-[#1a1a2e]/90 rounded-xl p-4 min-w-[280px] border-2 border-[#007FFF] shadow text-[#001F3F] dark:text-[#F0F8FF]">
            <div className="flex items-center justify-between mb-2">
              <span className={`font-bold text-[#001F3F] dark:text-[#F0F8FF]`}>
                Level {levelInfo.currentLevel} - {getLevelName(levelInfo.currentLevel)}
              </span>
              <span className="text-yellow-400 flex items-center">
                <Zap className="w-4 h-4 mr-1" />
                {user.earnedXp} XP
              </span>
            </div>
            
            <div className="w-full bg-gray-700 rounded-full h-3 mb-2">
              <div 
                className="bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full transition-all duration-500"
                style={{ width: `${levelInfo.progressPercentage}%` }}
              />
            </div>
            
            <div className="flex justify-between text-sm text-gray-400">
              <span>{levelInfo.xpProgress} / {levelInfo.xpForNextLevel - levelInfo.xpForCurrentLevel} XP</span>
              <span>{Math.round(levelInfo.progressPercentage)}% to next level</span>
            </div>
          </div>
        )}
      </div>

      {/* Action Buttons */}
      <div className={`flex ${isMobile ? 'flex-col space-y-2' : 'space-x-4'}`}>
        <button
          onClick={generateChallenges}
          disabled={generatingChallenges || challengesLoading || expensesLoading}
          className={`${isMobile ? 'w-full' : 'flex-1'} bg-purple-600 hover:bg-purple-700 disabled:opacity-50 text-white px-6 py-3 font-bold border-2 border-purple-400 transition-colors flex items-center justify-center`}
        >
          {generatingChallenges ? (
            <>
              <RefreshCw className="w-5 h-5 mr-2 animate-spin" />
              GENERATING...
            </>
          ) : (
            <>
              <Plus className="w-5 h-5 mr-2" />
              GENERATE AI CHALLENGES
            </>
          )}
        </button>

        <button
          onClick={refreshChallenges}
          disabled={challengesLoading}
          className={`${isMobile ? 'w-full' : ''} bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white px-6 py-3 font-bold border-2 border-blue-400 transition-colors flex items-center justify-center`}
        >
          <RefreshCw className={challengesLoading ? "w-5 h-5 mr-2 animate-spin" : "w-5 h-5 mr-2"} />
          REFRESH
        </button>
        
        {activeChallenges.length > 0 && (
          <button
            onClick={handleClearAllChallenges}
            disabled={challengesLoading}
            className={`${isMobile ? 'w-full' : ''} bg-red-600 hover:bg-red-700 disabled:opacity-50 text-white px-6 py-3 font-bold border-2 border-red-400 transition-colors flex items-center justify-center`}
          >
            <Trash2 className="w-5 h-5 mr-2" />
            CLEAR ALL
          </button>
        )}
      </div>

      {/* Stats Grid */}
      <div className={`grid ${isMobile ? 'grid-cols-2 gap-3' : 'grid-cols-4 gap-4'}`}>
        <div className="bg-[#F0F8FF] dark:bg-[#1a1a2e]/90 p-4 border-2 border-[#007FFF] shadow-[0_2px_8px_rgba(0,0,0,0.08)] text-[#001F3F] dark:text-[#F0F8FF]">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">ACTIVE</p>
              <p className="text-2xl font-bold text-[#001F3F] dark:text-[#F0F8FF]">{stats.activeChallenges}</p>
            </div>
            <Target className="w-8 h-8 text-blue-500" />
          </div>
        </div>
        
        <div className="bg-[#F0F8FF] dark:bg-[#1a1a2e]/90 p-4 border-2 border-[#007FFF] shadow-[0_2px_8px_rgba(0,0,0,0.08)] text-[#001F3F] dark:text-[#F0F8FF]">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">COMPLETED</p>
              <p className="text-2xl font-bold text-[#001F3F] dark:text-[#F0F8FF]">{stats.completedChallenges}</p>
            </div>
            <CheckCircle className="w-8 h-8 text-green-500" />
          </div>
        </div>
        
        <div className="bg-[#F0F8FF] dark:bg-[#1a1a2e]/90 p-4 border-2 border-[#007FFF] shadow-[0_2px_8px_rgba(0,0,0,0.08)] text-[#001F3F] dark:text-[#F0F8FF]">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">TOTAL XP</p>
              <p className="text-2xl font-bold text-[#001F3F] dark:text-[#F0F8FF]">{user?.earnedXp || 0}</p>
            </div>
            <Star className="w-8 h-8 text-yellow-500" />
          </div>
        </div>
        
        <div className="bg-[#F0F8FF] dark:bg-[#1a1a2e]/90 p-4 border-2 border-[#007FFF] shadow-[0_2px_8px_rgba(0,0,0,0.08)] text-[#001F3F] dark:text-[#F0F8FF]">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">LEVEL</p>
              <p className="text-2xl font-bold text-[#001F3F] dark:text-[#F0F8FF]">{levelInfo.currentLevel}</p>
            </div>
            <Trophy className="w-8 h-8 text-purple-500" />
          </div>
        </div>
      </div>

      {/* Challenges List */}
      <div className="space-y-4">
        
        {challengesLoading && (
          <div className="flex justify-center py-8">
            <RefreshCw className="w-8 h-8 text-white animate-spin" />
          </div>
        )}
        
        {challengesError && (
          <div className="bg-red-900 border border-red-600 text-red-200 p-4 text-center">
            Error: {challengesError}
          </div>
        )}
        
        {!challengesLoading && activeChallenges.length === 0 && (
          <div className="text-center py-8">
            <Trophy className="w-16 h-16 text-gray-600 mx-auto mb-4" />
            <p className="text-gray-400 text-lg">No active challenges</p>
            <p className="text-gray-500">Generate some challenges to get started!</p>
          </div>
        )}
        
        <div className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-1 lg:grid-cols-2'}`}>
          {activeChallenges.map((challenge) => (
            <div key={challenge.id} className="bg-[#F0F8FF] dark:bg-[#1a1a2e]/90 border-2 border-[#007FFF] p-6 shadow-[0_2px_8px_rgba(0,0,0,0.10)] text-[#001F3F] dark:text-[#F0F8FF]">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">{challenge.emoji}</span>
                  <div>
                    <h4 className="font-bold text-[#001F3F] dark:text-[#F0F8FF] text-lg">{challenge.title}</h4>
                  </div>
                </div>
                
                <div className="text-right">
                  <div className="flex items-center text-yellow-400 mb-1">
                    <Star className="w-4 h-4 mr-1" />
                    <span className="font-bold">{challenge.xpReward} XP</span>
                  </div>
                  <span className={`text-sm font-bold ${getDifficultyColor(challenge.difficulty)}`}>
                    {challenge.difficulty.toUpperCase()}
                  </span>
                </div>
              </div>
              
              <p className="text-[#001F3F] dark:text-[#F0F8FF] text-base mb-4">{challenge.description}</p>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center text-[#007FFF] dark:text-blue-200 text-sm">
                  <Clock className="w-4 h-4 mr-1" />
                  {formatDeadline(challenge.deadline)}
                </div>
                
                <button
                  onClick={() => handleCompleteChallenge(challenge.id)}
                  disabled={challengesLoading}
                  className="bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white px-4 py-2 font-bold border-2 border-green-400 transition-colors flex items-center"
                >
                  <CheckCircle className="w-4 h-4 mr-2" />
                  COMPLETE
                </button>
              </div>

              <div className="flex items-center space-x-2 mt-1">
                <span className={`w-3 h-3 rounded-full ${getCategoryColor(challenge.category)}`}></span>
                <span className="text-[#007FFF] dark:text-blue-200 text-sm capitalize">{challenge.category}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Level Up Modal */}
      {showLevelUpModal && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
          <div className="bg-gray-800 border-2 border-yellow-400 p-8 max-w-md mx-4 text-center">
            <div className="text-6xl mb-4">🎉</div>
            <h2 className="text-2xl font-bold text-yellow-400 mb-2">LEVEL UP!</h2>
            <p className="text-white mb-2">Congratulations!</p>
            <p className="text-gray-400 mb-6">
              You are now Level {levelInfo.currentLevel} {getLevelName(levelInfo.currentLevel)}!
            </p>
            
            <button
              onClick={() => setShowLevelUpModal(false)}
              className="w-full bg-yellow-600 hover:bg-yellow-700 text-black px-6 py-3 font-bold border-2 border-yellow-400"
            >
              AWESOME!
            </button>
          </div>
        </div>
      )}
    </div>
  )
} 